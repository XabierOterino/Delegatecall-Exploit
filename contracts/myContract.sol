pragma solidity ^0.8.0;
import "hardhat/console.sol";

/**
 * Delegate call hack:
 * EOA calls contract A => A calls B => b delegatecalls C
 */



// Attacker contract
contract A{
    address _owner;
    constructor(){_owner = msg.sender;}
    function attack(address _b) external {
        _b.call('');
    }

}


// Dellegator
contract B {
    C public c;
    constructor(address _c){
        c = C(_c);
    }

    fallback() external{
        address(c).delegatecall(abi.encodeWithSignature('setOwner(address)', msg.sender));
        console.log(c.owner());
    }
}


// Target contract  
contract C{
    address  _owner;
    function setOwner() public{
        _owner = msg.sender;
    }
    function owner() external view returns(address){
        return _owner;
    }
}
